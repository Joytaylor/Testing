{"version":3,"sources":["components/tetris-board.tsx","components/tetris.tsx","serviceWorker.ts","index.tsx"],"names":["TetrisBoard","props","rows","field","forEach","row","index","col","map","column","className","key","push","level","score","gameOver","Tetris","handlePauseClick","setState","prev","isPaused","handleNewGameClick","y","boardHeight","x","boardWidth","xStart","Math","floor","parseInt","activeTile","activeTileY","activeTileX","tileRotate","tileCount","state","timerId","tiles","window","setInterval","handleBoardUpdate","this","clearInterval","command","xAdd","yAdd","rotateAdd","tile","rotate","xAddIsValid","i","newRotate","rotateIsValid","yAddIsValid","isLineComplete","random","onClick","React","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+LAyCeA,EA9BsC,SAACC,GACpD,IAAIC,EAAc,GAalB,OAXAD,EAAME,MAAMC,SAAQ,SAACC,EAAKC,GACxB,IAAMC,EAAMF,EAAIG,KAAI,SAACC,EAAaH,GAAd,OAClB,uBAAKI,UAAS,cAASD,GAAUE,IAAKL,OAGxCJ,EAAKU,KACH,uBAAKF,UAAU,kBAAkBC,IAAKL,GACnCC,OAKL,uBAAKG,UAAU,oBACb,uBAAKA,UAAU,oBACb,qBAAGA,UAAU,oBAAb,WAAyCT,EAAMY,OAC/C,qBAAGH,UAAU,oBAAb,UAAwCT,EAAMa,OAE7Cb,EAAMc,UACL,qBAAGL,UAAU,aACX,+CAIN,uBAAKA,UAAU,gBAAf,IAAgCR,KCggBvBc,E,kDA7gBb,WAAYf,GAAa,IAAD,uBACtB,cAAMA,IAsbRgB,iBAAmB,WACjB,EAAKC,UAAS,SAACC,GAAD,MAAW,CACvBC,UAAWD,EAAKC,cAzbI,EA4bxBC,mBAAqB,WAGnB,IADA,IAAIlB,EAAe,GACVmB,EAAI,EAAGA,EAAI,EAAKrB,MAAMsB,YAAaD,IAAK,CAE/C,IADA,IAAIjB,EAAM,GACDmB,EAAI,EAAGA,EAAI,EAAKvB,MAAMwB,WAAYD,IACzCnB,EAAIO,KAAK,GAEXT,EAAMS,KAAKP,GAEb,IAAIqB,EAASC,KAAKC,MAAMC,SAAS,EAAK5B,MAAMwB,YAAc,GAE1D,EAAKP,SAAS,CACZY,WAAY,EACZC,YAAa,EACbC,YAAaN,EACbO,WAAY,EACZnB,MAAO,EACPD,MAAO,EACPqB,UAAW,EACXnB,UAAU,EACVZ,MAAOA,KA9cT,IADA,IAAIA,EAAQ,GACHmB,EAAI,EAAGA,EAAIrB,EAAMsB,YAAaD,IAAK,CAE1C,IADA,IAAIjB,EAAM,GACDmB,EAAI,EAAGA,EAAIvB,EAAMwB,WAAYD,IACpCnB,EAAIO,KAAK,GAEXT,EAAMS,KAAKP,GAEb,IAAIqB,EAASC,KAAKC,MAAMC,SAAS5B,EAAMwB,YAAc,GAV/B,OAWtB,EAAKU,MAAQ,CACXL,WAAY,EACZE,YAAa,EACbD,YAAaL,EACbO,WAAY,EACZnB,MAAO,EACPD,MAAO,EACPqB,UAAW,EACXnB,UAAU,EACVK,UAAU,EACVjB,MAAOA,EACPiC,QAAS,KACTC,MAAO,CACL,CAEE,CACE,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,IAEN,CACE,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,IAEN,CACE,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,IAEN,CACE,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,KAGR,CAEE,CACE,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,IAEN,CACE,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,IAEN,CACE,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,IAEN,CACE,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,KAGR,CAEE,CACE,CAAC,GAAI,GACL,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,IAEN,CACE,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,IAEN,CACE,CAAC,GAAI,GACL,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,IAEN,CACE,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,KAGR,CAEE,CACE,CAAC,EAAG,GACJ,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,CAAC,GAAI,IAEP,CACE,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,GAAI,IAEP,CACE,CAAC,EAAG,GACJ,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,CAAC,EAAG,IAEN,CACE,CAAC,EAAG,GACJ,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,CAAC,GAAI,KAGT,CAEE,CACE,CAAC,EAAG,GACJ,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,EAAE,GAAI,IAER,CACE,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,GAAI,IAEP,CACE,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,EAAE,EAAG,GACL,CAAC,EAAG,IAEN,CACE,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,EAAE,EAAG,KAGT,CAEE,CACE,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,EAAE,EAAG,GACL,CAAC,GAAI,IAEP,CACE,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,EAAG,IAEN,CACE,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,EAAE,EAAG,GACL,EAAE,EAAG,IAEP,CACE,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,EAAE,GAAI,KAGV,CAEE,CACE,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,EAAE,GAAI,IAER,CACE,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,GAAI,IAEP,CACE,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,EAAE,GAAI,IAER,CACE,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,GAAI,KAGT,CAEE,CACE,CAAC,EAAG,GACJ,EAAE,EAAG,GACL,CAAC,GAAI,GACL,CAAC,GAAI,IAEP,CACE,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,EAAG,GACJ,CAAC,EAAG,IAEN,CACE,CAAC,EAAG,GACJ,EAAE,EAAG,GACL,CAAC,GAAI,GACL,CAAC,GAAI,IAEP,CACE,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,EAAG,GACJ,CAAC,EAAG,OA7OU,E,gEAmPH,IACfD,EADc,OAElBA,EAAUE,OAAOC,aACf,kBAAM,EAAKC,kBAAkB,UAC7B,KAA2B,GAAnBC,KAAKN,MAAMtB,MAAa,IAAM,IAAyB,GAAnB4B,KAAKN,MAAMtB,QAEzD4B,KAAKvB,SAAS,CACZkB,QAASA,M,6CAIXE,OAAOI,cAAcD,KAAKN,MAAMC,W,wCAEhBO,GAAkB,IAAD,OACjC,IAAIF,KAAKN,MAAMpB,WAAY0B,KAAKN,MAAMf,SAAtC,CAGA,IAAIwB,EAAO,EACPC,EAAO,EACPC,EAAY,EACZC,EAAON,KAAKN,MAAML,WACtB,OAAQa,GACN,IAAK,OACHC,GAAQ,EACR,MACF,IAAK,QACHA,EAAO,EACP,MACF,IAAK,OACHC,EAAO,EACP,MACF,IAAK,SACHC,EAAY,EAIhB,IAAI3C,EAAQsC,KAAKN,MAAMhC,MACnBqB,EAAIiB,KAAKN,MAAMH,YACfV,EAAImB,KAAKN,MAAMJ,YACfiB,EAASP,KAAKN,MAAMF,WAClBI,EAAQI,KAAKN,MAAME,MAEzBlC,EAAMmB,EAAIe,EAAMU,GAAMC,GAAQ,GAAG,IAAIxB,EAAIa,EAAMU,GAAMC,GAAQ,GAAG,IAAM,EACtE7C,EAAMmB,EAAIe,EAAMU,GAAMC,GAAQ,GAAG,IAAIxB,EAAIa,EAAMU,GAAMC,GAAQ,GAAG,IAAM,EACtE7C,EAAMmB,EAAIe,EAAMU,GAAMC,GAAQ,GAAG,IAAIxB,EAAIa,EAAMU,GAAMC,GAAQ,GAAG,IAAM,EACtE7C,EAAMmB,EAAIe,EAAMU,GAAMC,GAAQ,GAAG,IAAIxB,EAAIa,EAAMU,GAAMC,GAAQ,GAAG,IAAM,EAEtE,IAAIC,GAAc,EAElB,GAAa,IAATL,EACF,IAAK,IAAIM,EAAI,EAAGA,GAAK,EAAGA,IAEpB1B,EAAIoB,EAAOP,EAAMU,GAAMC,GAAQE,GAAG,IAAM,GACxC1B,EAAIoB,EAAOP,EAAMU,GAAMC,GAAQE,GAAG,GAAKT,KAAKxC,MAAMwB,aAK1C,IAFNtB,EAAMmB,EAAIe,EAAMU,GAAMC,GAAQE,GAAG,IAC/B1B,EAAIoB,EAAOP,EAAMU,GAAMC,GAAQE,GAAG,MAGpCD,GAAc,GAEhBA,GAAc,GAIhBA,IACFzB,GAAKoB,GAGP,IAAIO,EAAYH,EAASF,EAAY,EAAI,EAAIE,EAASF,EAClDM,GAAgB,EAEpB,GAAkB,IAAdN,EACF,IAAK,IAAII,EAAI,EAAGA,GAAK,EAAGA,IAEpB1B,EAAIa,EAAMU,GAAMI,GAAWD,GAAG,IAAM,GACpC1B,EAAIa,EAAMU,GAAMI,GAAWD,GAAG,GAAKT,KAAKxC,MAAMwB,YAC9CH,EAAIe,EAAMU,GAAMI,GAAWD,GAAG,IAAM,GACpC5B,EAAIe,EAAMU,GAAMI,GAAWD,GAAG,GAAKT,KAAKxC,MAAMsB,cAKtC,IAFNpB,EAAMmB,EAAIe,EAAMU,GAAMI,GAAWD,GAAG,IAClC1B,EAAIa,EAAMU,GAAMI,GAAWD,GAAG,MAGhCE,GAAgB,GAElBA,GAAgB,GAIlBA,IACFJ,EAASG,GAEX,IAAIE,GAAc,EAClB,GAAa,IAATR,EACF,IAAK,IAAIK,EAAI,EAAGA,GAAK,EAAGA,IAEpB5B,EAAIuB,EAAOR,EAAMU,GAAMC,GAAQE,GAAG,IAAM,GACxC5B,EAAIuB,EAAOR,EAAMU,GAAMC,GAAQE,GAAG,GAAKT,KAAKxC,MAAMsB,cAK1C,IAFNpB,EAAMmB,EAAIuB,EAAOR,EAAMU,GAAMC,GAAQE,GAAG,IACtC1B,EAAIa,EAAMU,GAAMC,GAAQE,GAAG,MAG7BG,GAAc,GAEhBA,GAAc,GAYpB,GARIA,IACF/B,GAAKuB,GAEP1C,EAAMmB,EAAIe,EAAMU,GAAMC,GAAQ,GAAG,IAAIxB,EAAIa,EAAMU,GAAMC,GAAQ,GAAG,IAAMD,EACtE5C,EAAMmB,EAAIe,EAAMU,GAAMC,GAAQ,GAAG,IAAIxB,EAAIa,EAAMU,GAAMC,GAAQ,GAAG,IAAMD,EACtE5C,EAAMmB,EAAIe,EAAMU,GAAMC,GAAQ,GAAG,IAAIxB,EAAIa,EAAMU,GAAMC,GAAQ,GAAG,IAAMD,EACtE5C,EAAMmB,EAAIe,EAAMU,GAAMC,GAAQ,GAAG,IAAIxB,EAAIa,EAAMU,GAAMC,GAAQ,GAAG,IAAMD,GAEjEM,EAAa,CAChB,IAAK,IAAIhD,EAAMoC,KAAKxC,MAAMsB,YAAc,EAAGlB,GAAO,EAAGA,IAAO,CAE1D,IADA,IAAIiD,GAAiB,EACZ/C,EAAM,EAAGA,EAAMkC,KAAKxC,MAAMwB,WAAYlB,IACrB,IAApBJ,EAAME,GAAKE,KACb+C,GAAiB,GAGrB,GAAIA,EAAgB,CAClB,KAAwBjD,EAAM,EAAGA,IAC/B,IAAK,IAAIE,EAAM,EAAGA,EAAMkC,KAAKxC,MAAMwB,WAAYlB,IAC7CJ,EAAME,GAAKE,GAAOJ,EAAME,EAAM,GAAGE,GAGrCF,EAAMoC,KAAKxC,MAAMsB,aASrB,IAAIa,EANJK,KAAKvB,UAAS,SAACC,GAAD,MAAW,CACvBL,MAAOK,EAAKL,MAAQ,EAAIK,EAAKN,MAC7BqB,UAAWf,EAAKe,UAAY,EAC5BrB,MAAO,EAAIc,KAAKC,MAAMT,EAAKe,UAAY,QAIzCQ,cAAcD,KAAKN,MAAMC,SAEzBA,EAAUG,aACR,kBAAM,EAAKC,kBAAkB,UAC7B,KAA2B,GAAnBC,KAAKN,MAAMtB,MAAa,IAAM,IAAyB,GAAnB4B,KAAKN,MAAMtB,QAEzD4B,KAAKvB,SAAS,CACZkB,QAASA,IAGXW,EAAOpB,KAAKC,MAAsB,EAAhBD,KAAK4B,SAAe,GACtC/B,EAAIK,SAASY,KAAKxC,MAAMwB,YAAc,EAEtCuB,EAAS,EAIL,IADF7C,GAJFmB,EAAI,GAIQe,EAAMU,GAAMC,GAAQ,GAAG,IAAIxB,EAAIa,EAAMU,GAAMC,GAAQ,GAAG,KAG9D,IADF7C,EAAMmB,EAAIe,EAAMU,GAAMC,GAAQ,GAAG,IAAIxB,EAAIa,EAAMU,GAAMC,GAAQ,GAAG,KAG9D,IADF7C,EAAMmB,EAAIe,EAAMU,GAAMC,GAAQ,GAAG,IAAIxB,EAAIa,EAAMU,GAAMC,GAAQ,GAAG,KAG9D,IADF7C,EAAMmB,EAAIe,EAAMU,GAAMC,GAAQ,GAAG,IAAIxB,EAAIa,EAAMU,GAAMC,GAAQ,GAAG,IAGhEP,KAAKvB,SAAS,CACZH,UAAU,KAGZZ,EAAMmB,EAAIe,EAAMU,GAAMC,GAAQ,GAAG,IAC/BxB,EAAIa,EAAMU,GAAMC,GAAQ,GAAG,IACzBD,EACJ5C,EAAMmB,EAAIe,EAAMU,GAAMC,GAAQ,GAAG,IAC/BxB,EAAIa,EAAMU,GAAMC,GAAQ,GAAG,IACzBD,EACJ5C,EAAMmB,EAAIe,EAAMU,GAAMC,GAAQ,GAAG,IAC/BxB,EAAIa,EAAMU,GAAMC,GAAQ,GAAG,IACzBD,EACJ5C,EAAMmB,EAAIe,EAAMU,GAAMC,GAAQ,GAAG,IAC/BxB,EAAIa,EAAMU,GAAMC,GAAQ,GAAG,IACzBD,GAGRN,KAAKvB,SAAS,CACZf,MAAOA,EACP6B,YAAaR,EACbO,YAAaT,EACbW,WAAYe,EACZlB,WAAYiB,O,+BAgCN,IAAD,OACP,OACE,uBAAKrC,UAAU,UAEb,gBAAC,EAAD,CACEP,MAAOsC,KAAKN,MAAMhC,MAClBY,SAAU0B,KAAKN,MAAMpB,SACrBD,MAAO2B,KAAKN,MAAMrB,MAClBD,MAAO4B,KAAKN,MAAMtB,MAClBmC,OAAQP,KAAKN,MAAMF,aAIrB,uBAAKvB,UAAU,0BACb,0BACEA,UAAU,MACV8C,QAAS,kBAAM,EAAKhB,kBAAkB,UAFxC,QAOA,0BACE9B,UAAU,MACV8C,QAAS,kBAAM,EAAKhB,kBAAkB,UAFxC,QAOA,0BACE9B,UAAU,MACV8C,QAAS,kBAAM,EAAKhB,kBAAkB,WAFxC,SAOA,0BACE9B,UAAU,MACV8C,QAAS,kBAAM,EAAKhB,kBAAkB,YAFxC,WASF,uBAAK9B,UAAU,yBACb,0BAAQA,UAAU,MAAM8C,QAASf,KAAKpB,oBAAtC,YAIA,0BAAQX,UAAU,MAAM8C,QAASf,KAAKxB,kBACnCwB,KAAKN,MAAMf,SAAW,SAAW,e,GAvgBzBqC,aCXDC,QACW,cAA7BpB,OAAOqB,SAASC,UAEe,UAA7BtB,OAAOqB,SAASC,UAEhBtB,OAAOqB,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,EAAD,CAAQtC,WAAW,KAAKF,YAAY,OACpCyC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d38876e4.chunk.js","sourcesContent":["//Based on a tutorial found at https://blog.alexdevero.com/tetris-game-react-typescript/\r\nimport * as React from \"react\";\r\n\r\ntype TetrisBoardProperties = {\r\n  field: any[];\r\n  gameOver: boolean;\r\n  score: number;\r\n  level: number;\r\n  rotate: number;\r\n};\r\n\r\nconst TetrisBoard: React.FC<TetrisBoardProperties> = (props) => {\r\n  let rows: any[] = [];\r\n\r\n  props.field.forEach((row, index) => {\r\n    const col = row.map((column: any, index: number) => (\r\n      <div className={`col-${column}`} key={index} />\r\n    ));\r\n\r\n    rows.push(\r\n      <div className=\"tetris-boardRow\" key={index}>\r\n        {col}\r\n      </div>\r\n    );\r\n  });\r\n  return (\r\n    <div className=\"tetris-Container\">\r\n      <div className=\"tetris-boardInfo\">\r\n        <p className=\"tetris-boardText\"> Level: {props.level}</p>\r\n        <p className=\"tetris-boardText\"> Score {props.score}</p>\r\n\r\n        {props.gameOver && (\r\n          <p className=\"boardText\">\r\n            <strong> Game Over </strong>\r\n          </p>\r\n        )}\r\n      </div>\r\n      <div className=\"tetris-board\"> {rows}</div>\r\n    </div>\r\n  );\r\n};\r\nexport default TetrisBoard;\r\n","import * as React from \"react\";\r\nimport TetrisBoard from \"./tetris-board\";\r\n\r\ntype TetrisProps = {\r\n  boardWidth: any;\r\n  boardHeight: any;\r\n};\r\n\r\ntype TetrisState = {\r\n  activeTileX: number;\r\n  activeTileY: number;\r\n  activeTile: number;\r\n  tileRotate: number;\r\n  score: number;\r\n  level: number;\r\n  tileCount: number;\r\n  gameOver: boolean;\r\n  isPaused: boolean;\r\n  field: any[];\r\n  timerId: any;\r\n  tiles: number[][][][];\r\n};\r\n\r\nclass Tetris extends React.Component<TetrisProps, TetrisState> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    let field = [];\r\n    for (let y = 0; y < props.boardHeight; y++) {\r\n      let row = [];\r\n      for (let x = 0; x < props.boardWidth; x++) {\r\n        row.push(0);\r\n      }\r\n      field.push(row);\r\n    }\r\n    let xStart = Math.floor(parseInt(props.boardWidth) / 2);\r\n    this.state = {\r\n      activeTile: 1,\r\n      activeTileX: 1,\r\n      activeTileY: xStart,\r\n      tileRotate: 0,\r\n      score: 0,\r\n      level: 1,\r\n      tileCount: 0,\r\n      gameOver: false,\r\n      isPaused: true,\r\n      field: field,\r\n      timerId: null,\r\n      tiles: [\r\n        [\r\n          // The default square\r\n          [\r\n            [0, 0],\r\n            [0, 0],\r\n            [0, 0],\r\n            [0, 0],\r\n          ],\r\n          [\r\n            [0, 0],\r\n            [0, 0],\r\n            [0, 0],\r\n            [0, 0],\r\n          ],\r\n          [\r\n            [0, 0],\r\n            [0, 0],\r\n            [0, 0],\r\n            [0, 0],\r\n          ],\r\n          [\r\n            [0, 0],\r\n            [0, 0],\r\n            [0, 0],\r\n            [0, 0],\r\n          ],\r\n        ],\r\n        [\r\n          // The Fube tile (block 2x2)\r\n          [\r\n            [0, 0],\r\n            [1, 0],\r\n            [0, 1],\r\n            [1, 1],\r\n          ],\r\n          [\r\n            [0, 0],\r\n            [1, 0],\r\n            [0, 1],\r\n            [1, 1],\r\n          ],\r\n          [\r\n            [0, 0],\r\n            [1, 0],\r\n            [0, 1],\r\n            [1, 1],\r\n          ],\r\n          [\r\n            [0, 0],\r\n            [1, 0],\r\n            [0, 1],\r\n            [1, 1],\r\n          ],\r\n        ],\r\n        [\r\n          // The I tile\r\n          [\r\n            [0, -1],\r\n            [0, 0],\r\n            [0, 1],\r\n            [0, 2],\r\n          ],\r\n          [\r\n            [-1, 0],\r\n            [0, 0],\r\n            [1, 0],\r\n            [2, 0],\r\n          ],\r\n          [\r\n            [0, -1],\r\n            [0, 0],\r\n            [0, 1],\r\n            [0, 2],\r\n          ],\r\n          [\r\n            [-1, 0],\r\n            [0, 0],\r\n            [1, 0],\r\n            [2, 0],\r\n          ],\r\n        ],\r\n        [\r\n          // The T tile\r\n          [\r\n            [0, 0],\r\n            [-1, 0],\r\n            [1, 0],\r\n            [0, -1],\r\n          ],\r\n          [\r\n            [0, 0],\r\n            [1, 0],\r\n            [0, 1],\r\n            [0, -1],\r\n          ],\r\n          [\r\n            [0, 0],\r\n            [-1, 0],\r\n            [1, 0],\r\n            [0, 1],\r\n          ],\r\n          [\r\n            [0, 0],\r\n            [-1, 0],\r\n            [0, 1],\r\n            [0, -1],\r\n          ],\r\n        ],\r\n        [\r\n          // The inverse L tile\r\n          [\r\n            [0, 0],\r\n            [-1, 0],\r\n            [1, 0],\r\n            [-1, -1],\r\n          ],\r\n          [\r\n            [0, 0],\r\n            [0, 1],\r\n            [0, -1],\r\n            [1, -1],\r\n          ],\r\n          [\r\n            [0, 0],\r\n            [1, 0],\r\n            [-1, 0],\r\n            [1, 1],\r\n          ],\r\n          [\r\n            [0, 0],\r\n            [0, 1],\r\n            [0, -1],\r\n            [-1, 1],\r\n          ],\r\n        ],\r\n        [\r\n          // The L tile\r\n          [\r\n            [0, 0],\r\n            [1, 0],\r\n            [-1, 0],\r\n            [1, -1],\r\n          ],\r\n          [\r\n            [0, 0],\r\n            [0, 1],\r\n            [0, -1],\r\n            [1, 1],\r\n          ],\r\n          [\r\n            [0, 0],\r\n            [1, 0],\r\n            [-1, 0],\r\n            [-1, 1],\r\n          ],\r\n          [\r\n            [0, 0],\r\n            [0, 1],\r\n            [0, -1],\r\n            [-1, -1],\r\n          ],\r\n        ],\r\n        [\r\n          // The Z tile\r\n          [\r\n            [0, 0],\r\n            [1, 0],\r\n            [0, -1],\r\n            [-1, -1],\r\n          ],\r\n          [\r\n            [0, 0],\r\n            [1, 0],\r\n            [0, 1],\r\n            [1, -1],\r\n          ],\r\n          [\r\n            [0, 0],\r\n            [1, 0],\r\n            [0, -1],\r\n            [-1, -1],\r\n          ],\r\n          [\r\n            [0, 0],\r\n            [1, 0],\r\n            [0, 1],\r\n            [1, -1],\r\n          ],\r\n        ],\r\n        [\r\n          // The inverse Z tile\r\n          [\r\n            [0, 0],\r\n            [-1, 0],\r\n            [0, -1],\r\n            [1, -1],\r\n          ],\r\n          [\r\n            [0, 0],\r\n            [0, -1],\r\n            [1, 0],\r\n            [1, 1],\r\n          ],\r\n          [\r\n            [0, 0],\r\n            [-1, 0],\r\n            [0, -1],\r\n            [1, -1],\r\n          ],\r\n          [\r\n            [0, 0],\r\n            [0, -1],\r\n            [1, 0],\r\n            [1, 1],\r\n          ],\r\n        ],\r\n      ],\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    let timerId;\r\n    timerId = window.setInterval(\r\n      () => this.handleBoardUpdate(\"down\"),\r\n      1000 - (this.state.level * 10 > 600 ? 600 : this.state.level * 10)\r\n    );\r\n    this.setState({\r\n      timerId: timerId,\r\n    });\r\n  }\r\n  componentWillUnmount() {\r\n    window.clearInterval(this.state.timerId);\r\n  }\r\n  handleBoardUpdate(command: string) {\r\n    if (this.state.gameOver || this.state.isPaused) {\r\n      return;\r\n    }\r\n    let xAdd = 0;\r\n    let yAdd = 0;\r\n    let rotateAdd = 0;\r\n    let tile = this.state.activeTile;\r\n    switch (command) {\r\n      case \"left\":\r\n        xAdd = -1;\r\n        break;\r\n      case \"right\":\r\n        xAdd = 1;\r\n        break;\r\n      case \"down\":\r\n        yAdd = 1;\r\n        break;\r\n      case \"rotate\":\r\n        rotateAdd = 1;\r\n        break;\r\n    }\r\n\r\n    let field = this.state.field;\r\n    let x = this.state.activeTileX;\r\n    let y = this.state.activeTileY;\r\n    let rotate = this.state.tileRotate;\r\n    const tiles = this.state.tiles;\r\n\r\n    field[y + tiles[tile][rotate][0][1]][x + tiles[tile][rotate][0][0]] = 0;\r\n    field[y + tiles[tile][rotate][1][1]][x + tiles[tile][rotate][1][0]] = 0;\r\n    field[y + tiles[tile][rotate][2][1]][x + tiles[tile][rotate][2][0]] = 0;\r\n    field[y + tiles[tile][rotate][3][1]][x + tiles[tile][rotate][3][0]] = 0;\r\n    //find way to rewrite\r\n    let xAddIsValid = true;\r\n\r\n    if (xAdd !== 0) {\r\n      for (let i = 0; i <= 3; i++) {\r\n        if (\r\n          x + xAdd + tiles[tile][rotate][i][0] >= 0 &&\r\n          x + xAdd + tiles[tile][rotate][i][0] < this.props.boardWidth\r\n        ) {\r\n          if (\r\n            field[y + tiles[tile][rotate][i][1]][\r\n              x + xAdd + tiles[tile][rotate][i][0]\r\n            ] !== 0\r\n          ) {\r\n            xAddIsValid = false;\r\n          }\r\n          xAddIsValid = false;\r\n        }\r\n      }\r\n    }\r\n    if (xAddIsValid) {\r\n      x += xAdd;\r\n    }\r\n    //test rotation\r\n    let newRotate = rotate + rotateAdd > 3 ? 0 : rotate + rotateAdd;\r\n    let rotateIsValid = true;\r\n\r\n    if (rotateAdd !== 0) {\r\n      for (let i = 0; i <= 3; i++) {\r\n        if (\r\n          x + tiles[tile][newRotate][i][0] >= 0 &&\r\n          x + tiles[tile][newRotate][i][0] < this.props.boardWidth &&\r\n          y + tiles[tile][newRotate][i][1] >= 0 &&\r\n          y + tiles[tile][newRotate][i][1] < this.props.boardHeight\r\n        ) {\r\n          if (\r\n            field[y + tiles[tile][newRotate][i][1]][\r\n              x + tiles[tile][newRotate][i][0]\r\n            ] !== 0\r\n          ) {\r\n            rotateIsValid = false;\r\n          }\r\n          rotateIsValid = false;\r\n        }\r\n      }\r\n    }\r\n    if (rotateIsValid) {\r\n      rotate = newRotate;\r\n    }\r\n    let yAddIsValid = true;\r\n    if (yAdd !== 0) {\r\n      for (let i = 0; i <= 3; i++) {\r\n        if (\r\n          y + yAdd + tiles[tile][rotate][i][1] >= 0 &&\r\n          y + yAdd + tiles[tile][rotate][i][1] < this.props.boardHeight\r\n        ) {\r\n          if (\r\n            field[y + yAdd + tiles[tile][rotate][i][1]][\r\n              x + tiles[tile][rotate][i][0]\r\n            ] !== 0\r\n          ) {\r\n            yAddIsValid = false;\r\n          }\r\n          yAddIsValid = false;\r\n        }\r\n      }\r\n    }\r\n    if (yAddIsValid) {\r\n      y += yAdd;\r\n    }\r\n    field[y + tiles[tile][rotate][0][1]][x + tiles[tile][rotate][0][0]] = tile;\r\n    field[y + tiles[tile][rotate][1][1]][x + tiles[tile][rotate][1][0]] = tile;\r\n    field[y + tiles[tile][rotate][2][1]][x + tiles[tile][rotate][2][0]] = tile;\r\n    field[y + tiles[tile][rotate][3][1]][x + tiles[tile][rotate][3][0]] = tile;\r\n\r\n    if (!yAddIsValid) {\r\n      for (let row = this.props.boardHeight - 1; row >= 0; row--) {\r\n        let isLineComplete = true;\r\n        for (let col = 0; col < this.props.boardWidth; col++) {\r\n          if (field[row][col] === 0) {\r\n            isLineComplete = false;\r\n          }\r\n        }\r\n        if (isLineComplete) {\r\n          for (let yRowSrc = row; row > 0; row--) {\r\n            for (let col = 0; col < this.props.boardWidth; col++) {\r\n              field[row][col] = field[row - 1][col];\r\n            }\r\n          }\r\n          row = this.props.boardHeight;\r\n        }\r\n      }\r\n      this.setState((prev) => ({\r\n        score: prev.score + 1 * prev.level,\r\n        tileCount: prev.tileCount + 1,\r\n        level: 1 + Math.floor(prev.tileCount / 10),\r\n      }));\r\n      // create timer function\r\n      let timerId;\r\n      clearInterval(this.state.timerId);\r\n\r\n      timerId = setInterval(\r\n        () => this.handleBoardUpdate(\"down\"),\r\n        1000 - (this.state.level * 10 > 600 ? 600 : this.state.level * 10)\r\n      );\r\n      this.setState({\r\n        timerId: timerId,\r\n      });\r\n\r\n      tile = Math.floor(Math.random() * 7 + 1);\r\n      x = parseInt(this.props.boardWidth) / 2;\r\n      y = 1;\r\n      rotate = 0;\r\n\r\n      if (\r\n        field[y + tiles[tile][rotate][0][1]][x + tiles[tile][rotate][0][0]] !==\r\n          0 ||\r\n        field[y + tiles[tile][rotate][1][1]][x + tiles[tile][rotate][1][0]] !==\r\n          0 ||\r\n        field[y + tiles[tile][rotate][2][1]][x + tiles[tile][rotate][2][0]] !==\r\n          0 ||\r\n        field[y + tiles[tile][rotate][3][1]][x + tiles[tile][rotate][3][0]] !==\r\n          0\r\n      ) {\r\n        this.setState({\r\n          gameOver: true,\r\n        });\r\n      } else {\r\n        field[y + tiles[tile][rotate][0][1]][\r\n          x + tiles[tile][rotate][0][0]\r\n        ] = tile;\r\n        field[y + tiles[tile][rotate][1][1]][\r\n          x + tiles[tile][rotate][1][0]\r\n        ] = tile;\r\n        field[y + tiles[tile][rotate][2][1]][\r\n          x + tiles[tile][rotate][2][0]\r\n        ] = tile;\r\n        field[y + tiles[tile][rotate][3][1]][\r\n          x + tiles[tile][rotate][3][0]\r\n        ] = tile;\r\n      }\r\n    }\r\n    this.setState({\r\n      field: field,\r\n      activeTileX: x,\r\n      activeTileY: y,\r\n      tileRotate: rotate,\r\n      activeTile: tile,\r\n    });\r\n  }\r\n  handlePauseClick = () => {\r\n    this.setState((prev) => ({\r\n      isPaused: !prev.isPaused,\r\n    }));\r\n  };\r\n  handleNewGameClick = () => {\r\n    //function this\r\n    let field: any[] = [];\r\n    for (let y = 0; y < this.props.boardHeight; y++) {\r\n      let row = [];\r\n      for (let x = 0; x < this.props.boardWidth; x++) {\r\n        row.push(0);\r\n      }\r\n      field.push(row);\r\n    }\r\n    let xStart = Math.floor(parseInt(this.props.boardWidth) / 2);\r\n\r\n    this.setState({\r\n      activeTile: 2,\r\n      activeTileY: 1,\r\n      activeTileX: xStart,\r\n      tileRotate: 0,\r\n      score: 0,\r\n      level: 1,\r\n      tileCount: 0,\r\n      gameOver: false,\r\n      field: field,\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"tetris\">\r\n        {/* Tetris board */}\r\n        <TetrisBoard\r\n          field={this.state.field}\r\n          gameOver={this.state.gameOver}\r\n          score={this.state.score}\r\n          level={this.state.level}\r\n          rotate={this.state.tileRotate}\r\n        />\r\n\r\n        {/* Buttons to control blocks */}\r\n        <div className=\"tetris__block-controls\">\r\n          <button\r\n            className=\"btn\"\r\n            onClick={() => this.handleBoardUpdate(\"left\")}\r\n          >\r\n            Left\r\n          </button>\r\n\r\n          <button\r\n            className=\"btn\"\r\n            onClick={() => this.handleBoardUpdate(\"down\")}\r\n          >\r\n            Down\r\n          </button>\r\n\r\n          <button\r\n            className=\"btn\"\r\n            onClick={() => this.handleBoardUpdate(\"right\")}\r\n          >\r\n            Right\r\n          </button>\r\n\r\n          <button\r\n            className=\"btn\"\r\n            onClick={() => this.handleBoardUpdate(\"rotate\")}\r\n          >\r\n            Rotate\r\n          </button>\r\n        </div>\r\n\r\n        {/* Buttons to control game */}\r\n        <div className=\"tetris__game-controls\">\r\n          <button className=\"btn\" onClick={this.handleNewGameClick}>\r\n            New Game\r\n          </button>\r\n\r\n          <button className=\"btn\" onClick={this.handlePauseClick}>\r\n            {this.state.isPaused ? \"Resume\" : \"Pause\"}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Tetris;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n//import App from \"./App\";\nimport Tetris from \"./components/tetris\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Tetris boardWidth=\"14\" boardHeight=\"20\" />,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}