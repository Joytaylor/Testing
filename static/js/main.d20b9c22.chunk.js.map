{"version":3,"sources":["data.js","components/projectCard.tsx","components/ScrollableGrid.tsx","components/projects.tsx","components/contactMe.tsx","views/home.tsx","serviceWorker.ts","index.tsx"],"names":["data","id","title","sDate","month","day","year","img","sentence","description","useStyles","makeStyles","theme","createStyles","cRoot","media","height","paddingTop","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","RecipeReviewCard","props","classes","React","useState","expanded","setExpanded","created","Date","setMonth","setFullYear","Card","className","CardHeader","subheader","toLocaleString","getFullYear","CardMedia","image","CardContent","Typography","variant","color","component","CardActions","disableSpacing","IconButton","clsx","onClick","aria-expanded","aria-label","Collapse","in","timeout","unmountOnExit","paragraph","descr","pRoot","display","flexWrap","padding","justifyContent","backgroundColor","gridList","paddingBlock","palette","primary","light","Project","GridList","cellHeight","cols","map","tile","GridListTile","key","Data","link","icon","marginRight","spacing","width","ContactMe","Breadcrumbs","Link","href","target","root","flexGrow","items","marginTop","navBar","Pages","pages","style","AppBar","Tabs","centered","src","Tab","label","Grid","container","direction","justify","alignItems","page","item","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d20b9c22.chunk.js","sourcesContent":["const data = [\r\n  {\r\n    id: 1,\r\n    title: \"This Website\",\r\n    sDate: { month: 7, day: 15, year: 2020 },\r\n    img: \"./images/jticon.png\",\r\n    sentence: \"React project hosted on GitPages\",\r\n    description: \"~ TypeScript \",\r\n  },\r\n  {\r\n    id: 2,\r\n    title: \"Tiny Little Obbys\",\r\n    sDate: { month: 6, day: 10, year: 2020 },\r\n\r\n    img: \"./images/icon6-22-2020.png\",\r\n    sentence: \"A Lua project created in the Roblox engine\",\r\n    description:\r\n      \"~ Lua  ~ Firebase  ~  client/server interactions. Because of the game being public, I have learned a lot from fellow developers on ways to prevent exploitive behaviors coming from the client-side. Also, I take data from each round that occurs from the game and store it in a Firebase real-time database. I use this to data to calculate round completion rates, as well as the popularity of the game mode through a Python script. The results of the script are then used to determine if the levels are too difficult for players and if levels should be moved to different game modes to improve player experience. \",\r\n  },\r\n  {\r\n    id: 1,\r\n    title: \"Tiny Little Obbys\",\r\n    sDate: { month: 6, day: 10, year: 2020 },\r\n    img: \"./icon6-22-2020.png\",\r\n    sentence: \"A Lua project created in the Roblox engine\",\r\n    description:\r\n      \"This project has enabled me to learn Lua as well as client/server interactions. Because of the game being public, I have learned a lot from fellow developers on ways to prevent exploitive behaviors coming from the client-side. Also, I take data from each round that occurs from the game and store it in a Firebase real-time database. I use this to data to calculate round completion rates, as well as the popularity of the game mode through a Python script. The results of the script are then used to determine if the levels are too difficult for players and if levels should be moved to different game modes to improve player experience. \",\r\n  },\r\n  {\r\n    id: 1,\r\n    title: \"Tiny Little Obbys\",\r\n    sDate: { month: 6, day: 10, year: 2020 },\r\n    img: \"./icon6-22-2020.png\",\r\n    sentence: \"A Lua project created in the Roblox engine\",\r\n    description:\r\n      \"This project has enabled me to learn Lua as well as client/server interactions. Because of the game being public, I have learned a lot from fellow developers on ways to prevent exploitive behaviors coming from the client-side. Also, I take data from each round that occurs from the game and store it in a Firebase real-time database. I use this to data to calculate round completion rates, as well as the popularity of the game mode through a Python script. The results of the script are then used to determine if the levels are too difficult for players and if levels should be moved to different game modes to improve player experience. \",\r\n  },\r\n  {\r\n    id: 1,\r\n    title: \"Tiny Little Obbys\",\r\n    sDate: { month: 6, day: 10, year: 2020 },\r\n    img: \"./icon6-22-2020.png\",\r\n    sentence: \"A Lua project created in the Roblox engine\",\r\n    description:\r\n      \"This project has enabled me to learn Lua as well as client/server interactions. Because of the game being public, I have learned a lot from fellow developers on ways to prevent exploitive behaviors coming from the client-side. Also, I take data from each round that occurs from the game and store it in a Firebase real-time database. I use this to data to calculate round completion rates, as well as the popularity of the game mode through a Python script. The results of the script are then used to determine if the levels are too difficult for players and if levels should be moved to different game modes to improve player experience. \",\r\n  },\r\n  {\r\n    id: 1,\r\n    title: \"Tiny Little Obbys\",\r\n    sDate: { month: 6, day: 10, year: 2020 },\r\n    img: \"./icon6-22-2020.png\",\r\n    sentence: \"A Lua project created in the Roblox engine\",\r\n    description:\r\n      \"This project has enabled me to learn Lua as well as client/server interactions. Because of the game being public, I have learned a lot from fellow developers on ways to prevent exploitive behaviors coming from the client-side. Also, I take data from each round that occurs from the game and store it in a Firebase real-time database. I use this to data to calculate round completion rates, as well as the popularity of the game mode through a Python script. The results of the script are then used to determine if the levels are too difficult for players and if levels should be moved to different game modes to improve player experience. \",\r\n  },\r\n];\r\n\r\nexport default data;\r\n","import React from \"react\";\r\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\r\nimport clsx from \"clsx\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    cRoot: {},\r\n    media: {\r\n      height: 0,\r\n      paddingTop: \"56.25%\", // 16:9\r\n    },\r\n    expand: {\r\n      transform: \"rotate(0deg)\",\r\n      marginLeft: \"auto\",\r\n      transition: theme.transitions.create(\"transform\", {\r\n        duration: theme.transitions.duration.shortest,\r\n      }),\r\n    },\r\n    expandOpen: {\r\n      transform: \"rotate(180deg)\",\r\n    },\r\n  })\r\n);\r\n\r\nexport default function RecipeReviewCard(props: any) {\r\n  const classes = useStyles();\r\n  const [expanded, setExpanded] = React.useState(false);\r\n\r\n  let created = new Date();\r\n  created.setMonth(props.sDate.month);\r\n  created.setFullYear(props.sDate.year);\r\n  const handleExpandClick = () => {\r\n    setExpanded(!expanded);\r\n  };\r\n\r\n  return (\r\n    <Card className={classes.cRoot}>\r\n      <CardHeader\r\n        /*action={\r\n          <IconButton aria-label=\"settings\">\r\n            <MoreVertIcon />\r\n          </IconButton>\r\n        }*/\r\n        title={props.title}\r\n        subheader={\r\n          \"Started \" +\r\n          created.toLocaleString(\"default\", { month: \"long\" }) +\r\n          \" \" +\r\n          created.getFullYear()\r\n        }\r\n      />\r\n      <CardMedia\r\n        className={classes.media}\r\n        image={props.img}\r\n        title={props.title}\r\n      />\r\n      <CardContent>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n          {props.sentence /* short description of task*/}\r\n        </Typography>\r\n      </CardContent>\r\n      <CardActions disableSpacing>\r\n        <IconButton\r\n          className={clsx(classes.expand, {\r\n            [classes.expandOpen]: expanded,\r\n          })}\r\n          onClick={handleExpandClick}\r\n          aria-expanded={expanded}\r\n          aria-label=\"show more\"\r\n        >\r\n          <ExpandMoreIcon />\r\n        </IconButton>\r\n      </CardActions>\r\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n        <CardContent>\r\n          <Typography paragraph>More:</Typography>\r\n\r\n          <Typography paragraph>{props.descr}</Typography>\r\n        </CardContent>\r\n      </Collapse>\r\n    </Card>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Theme, createStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport ProjectCard from \"./projectCard\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    pRoot: {\r\n      display: \"flex\",\r\n      flexWrap: \"wrap\",\r\n      padding: \"5%\",\r\n      justifyContent: \"space-around\",\r\n      backgroundColor: \"rgba(255,255,255,.5)\",\r\n    },\r\n\r\n    gridList: {\r\n      flexWrap: \"nowrap\",\r\n      transform: \"translateZ(0)\",\r\n      paddingBlock: \"20%\",\r\n    },\r\n\r\n    title: {\r\n      color: theme.palette.primary.light,\r\n    },\r\n  })\r\n);\r\n\r\nexport default function Project(props: any) {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.pRoot}>\r\n      <GridList cellHeight={\"auto\"} className={classes.gridList} cols={3.2}>\r\n        {props.data.map((tile: any) => (\r\n          <GridListTile key={tile.img}>\r\n            <ProjectCard\r\n              title={tile.title}\r\n              sDate={tile.sDate}\r\n              img={tile.img}\r\n              sentence={tile.sentence}\r\n              descr={tile.description}\r\n            />\r\n          </GridListTile>\r\n        ))}\r\n      </GridList>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Data from \"../data\";\r\nimport ScrollableGrid from \"./ScrollableGrid\";\r\n\r\nexport default function Project() {\r\n  return (\r\n    <div>\r\n      <h1>Projects</h1>\r\n      <ScrollableGrid data={Data}></ScrollableGrid>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\r\nimport Breadcrumbs from \"@material-ui/core/Breadcrumbs\";\r\nimport EmailIcon from \"@material-ui/icons/Email\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport LinkedInIcon from \"@material-ui/icons/LinkedIn\";\r\nimport AttachmentIcon from \"@material-ui/icons/Attachment\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    link: {\r\n      display: \"flex\",\r\n    },\r\n    icon: {\r\n      marginRight: theme.spacing(2),\r\n      width: 20,\r\n      height: 20,\r\n    },\r\n  })\r\n);\r\n\r\nexport default function ContactMe() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Breadcrumbs aria-label=\"breadcrumb\">\r\n      <Link href=\"matio:joy.ana.taylor@gmail.com\" className={classes.link}>\r\n        <EmailIcon />\r\n        joy.ana.taylor@gmail.com\r\n      </Link>\r\n      <Link\r\n        href=\"https://www.linkedin.com/in/joy-anna/\"\r\n        target=\"_blank\"\r\n        className={classes.link}\r\n      >\r\n        <LinkedInIcon /> linkedin.com/in/joy-anna\r\n      </Link>\r\n      <Link>\r\n        <AttachmentIcon />\r\n      </Link>\r\n    </Breadcrumbs>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Projects from \"../components/projects\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport { Tab, Tabs } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport ContactMe from \"../components/contactMe\";\r\n\r\nconst useStyles = makeStyles((theme: any) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  items: {\r\n    marginTop: \"5%\",\r\n  },\r\n  navBar: {\r\n    marginLeft: \"100%\",\r\n    marginRight: \"10%\",\r\n  },\r\n}));\r\n\r\nexport default function Pages() {\r\n  const classes = useStyles();\r\n\r\n  const pages = [<Projects />, <ContactMe />]; // place new pages here after importing them\r\n  return (\r\n    <div>\r\n      <div style={{ height: 100 }} className={classes.navBar}>\r\n        <AppBar>\r\n          <div>\r\n            <Tabs centered>\r\n              <img src=\"./images/jticon.png\" width=\"75px\" height=\"75px\" />\r\n\r\n              <Tab label=\"Home\" />\r\n              <Tab label=\"Projects\" />\r\n              <Tab label=\"Organizations\" />\r\n              <Tab label=\"Awards\" />\r\n              <Tab label=\"Contact\" />\r\n            </Tabs>\r\n          </div>\r\n        </AppBar>\r\n      </div>\r\n\r\n      <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\r\n        {pages.map((page) => (\r\n          <Grid item className={classes.items}>\r\n            {page}\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n//import App from \"./App\";\n//import Tetris from \"./components/tetris\";\nimport Home from \"./views/home\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  // <Tetris boardWidth=\"14\" boardHeight=\"20\" />,\n  <Home />,\n\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}